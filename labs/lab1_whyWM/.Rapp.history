com
fradj = read.delim("http://stanford.edu/~messing/Krack-High-Tec-ADVICE.tab", header = TRUE, row.names = 1)
fradj
friend1 <- c("ben", "alex", "ben", "alex", "charlie")#
friend2 <- c("daisy", "elise","daisy","elise","daisy")#
#
community <- as.matrix(cbind(first, second))
com
community
friend1 <- c("ben", "alex", "ben", "alex", "charlie")#
friend2 <- c("daisy", "elise","daisy","elise","daisy")#
#
community <- as.matrix(cbind(first, second))#
#
colnames(community) = 1:2#
rownames(community) = c("alex","ben","charlie","daisy","elise")
com
community
name <- c("alex","ben","charlie","daisy","elise")#
friend1 <- c("ben", "alex", "ben", "alex", "charlie")#
friend2 <- c("daisy", "elise","daisy","elise","daisy")
community <- as.matrix(cbind(name, first, second))
colnames(community) = 1:2#
rownames(community) = 1:5
name <- c("alex","ben","charlie","daisy","elise")#
friend1 <- c("ben", "alex", "ben", "alex", "charlie")#
friend2 <- c("daisy", "elise","daisy","elise","daisy")#
#
community <- as.matrix(cbind(name, first, second))#
#
colnames(community) = 1:3#
rownames(community) = 1:5
community
ifelse(community[1,2:3]==community[1,1], com[1,1] == 1, com[1,1] ==0)
ifelse(community[1,2]==community[1,1], 1, 0)
ifelse(community[1,2:3]==community[1,1], 1, 0)
ifelse(community[1:length(community),2:3]==community[1,1], 1, 0)
ifelse(community[1:5,2:3]==community[1,1], 1, 0)
name <- c("alex","ben","charlie","daisy","elise")#
friend1 <- c("ben", "alex", "ben", "alex", "charlie")#
friend2 <- c("daisy", "elise","daisy","elise","daisy")#
#
community <- as.matrix(cbind(name, first, second))#
#
colnames(community) = 1:3#
rownames(community) = 1:5
community
com <- matrix(c(0),nrow=5,ncol=5)#
#
rownames(com) <- 1:5#
colnames(com) <- 1:5
com
community
ifelse(community[1:5,2:3]==community[1:5,1], 1, 0)
ifelse(community[1:5,2]==community[1:5,1], 1, 0)
?ifany
ifelse(community[1:5,2]==community[1,1], 1, 0)
?seq
ifelse(community[1:5,2]==seq(community[1,1], community[5,1]), 1, 0)
table(my_facebook)
str(my_facebook)
my_facebook[1]
my_facebook[2]
table(my_facebook[1], my_facebook[2])
margin.table(my_facebook,1)
margin.table(as.factor(my_facebook),1)
table(my_facebook)
str(my_facebook)
my_facebook$mut_friend_2 <- NULL
table(my_facebook)
?total
?sum
table(my_facebook)
?table
?exclude
table(my_facebook, exclude = NULL)
rm(list = ls(all = TRUE))#
setwd("/Users/tyfrazier/workspace/work-life/W&M/COLL/module1_rfacebook")#
#
my_raw_fb <- read.csv("/Volumes/WualaDrive/tyfrazier/workspace/work-life/W&M/COLL/module1_rfacebook/my_facebook.csv", header = FALSE, stringsAsFactors = FALSE)#
#
my_vector_fb <- my_raw_fb[,1]
remove_fm <-  c(grep("FriendsMessage", my_vector_fb))#
my_vector_fb <- my_vector_fb[-remove_fm]#
#
remove_fr <-  c(grep("Friend", my_vector_fb))#
my_vector_fb <- my_vector_fb[-remove_fr]#
#
my_fb <- sapply(split(my_vector_fb, cumsum(my_vector_fb=="More Options")), '[', -1)
friend_name <- unlist(lapply(my_fb, function(x){return(x[1])}) )#
friend_name <- sub(" \\(.*", "", friend_name)
friend_since <- unlist(lapply(my_fb, function(x){return(grep("Your ", x, value=TRUE))}))#
friend_since <- sub("Your friend since ", "", friend_since)
friends_raw <- unlist(lapply(my_fb, function(x){#
     result <- grep("mutual friend", x, value=TRUE)#
     if(length(result) == 0){return("0 mutual friends including none")}#
     return(result)}))
no_mut_friends <- sub(" .*", "", friends_raw)#
#
mut_friends <- sub(".*including |.*: ", "", friends_raw)#
#
mut_friend_1 <- sub(" and.*", "", mut_friends)#
#
mut_friend_2 <- sub(".*and ", "", mut_friends)#
#
my_facebook <- as.data.frame(cbind(friend_name, friend_since, mut_friend_1, mut_friend_2), stringsAsFactors = FALSE)
my_facebook
my_facebook$mut_friend_2 <- ifelse(my_facebook$mut_friend_2 == my_facebook$mut_friend_1, "none", my_facebook$mut_friend_2)#
#
my_facebook
getwd
getwd()
rm(list = ls(all = TRUE))#
setwd("/Users/tyfrazier/workspace/work-life/W&M/COLL/module1_rfacebook")#
#
my_raw_fb <- read.csv("/Volumes/WualaDrive/tyfrazier/workspace/work-life/W&M/COLL/module1_rfacebook/my_facebook.csv", header = FALSE, stringsAsFactors = FALSE)
my_raw_fb
str(my_raw_facebook)
str(my_raw_fb)
rm(list = ls(all = TRUE))#
setwd("/Users/tyfrazier/workspace/work-life/W&M/COLL/module1_rfacebook")#
#
my_raw_fb <- read.csv("/Volumes/WualaDrive/tyfrazier/workspace/work-life/W&M/COLL/module1_rfacebook/my_facebook.csv", header = FALSE, stringsAsFactors = FALSE)#
#
my_vector_fb <- my_raw_fb[,1]#
remove_fm <-  c(grep("FriendsMessage", my_vector_fb))#
my_vector_fb <- my_vector_fb[-remove_fm]#
#
remove_fr <-  c(grep("Friend", my_vector_fb))#
my_vector_fb <- my_vector_fb[-remove_fr]
my_vector_fb
my_fb <- sapply(split(my_vector_fb, cumsum(my_vector_fb=="More Options")), '[', -1)
friend_name <- unlist(lapply(my_fb, function(x){return(x[1])}) )
friend_name
data()
update.packages()#
packages = c("devtools", "choroplethr", "choroplethrMaps")#
if (length(setdiff(packages, rownames(installed.packages()))) > 0) #
{#
  install.packages(setdiff(packages, rownames(installed.packages())))  #
}#
#
# choroplethr_zip is on github, not cran#
if (!("choroplethrZip" %in% rownames(installed.packages())) ||#
    packageVersion("choroplethrZip" != "1.3.0")) #
{#
  library(devtools)#
  install_github('arilamstein/choroplethrZip@v1.3.0')        #
}#
#
# lastly, make sure people are using a current version of R#
r = R.Version()#
if (r$major < "3" ||#
    (r$major == "3" && r$minor < "2.0"))#
{#
  print(paste0(#
    "The current version of R is 3.2.0, but you are using version ",#
    r$major, ".", r$minor,#
    ". Please google 'download R' and download the current version of R."#
    ))#
}#
#
# now test#
library(choroplethr)#
data(df_pop_state)#
print(state_choropleth(df_pop_state))#
#
# state_choropleth_acs("B01003", endyear=2012, span=5)
library(UScensus2010)
library(UScensus2010county)
install.county("osx")
library(UScensus2010)
install.county("osx")
library(UScensus2010county)
data(virginia.county10)
choropleth(virginia.county10, border = "transparent")
install.tract("osx")
library(UScensus2010tract)
install.blkgrp("osx")
library(UScensus2010blkgrp)
?library
?install.packages
install.packages(UScensus2010, dependencies = TRUE)
data(virginia.tract10)
choropleth(virginia.tract10, border = "transparent")
names(virginia.blkgrp10)
library(UScensus2010blkgrp)
data(virginia.blkgrp10)
names(virginia.blkgrp10)
help(virginia.tract10)
library(UScensus2010)
library(UScensus2010county)
library(UScensus2010tract)
library(UScensus2010blkgrp)
data(virginia.county10)
data(virginia.tract10)
data(virginia.blkgrp10)
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)
virginia.county10$den_co <- den_co
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent")
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent")
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent")
par(mfrow=c(3,1))
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent")#
#
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent")#
#
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent")
par(mfrow=c(3,1))
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent", legend = FALSE)
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent", legend = FALSE)
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent", legend = FALSE)
par(mfrow=c(2,2))
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent", legend = FALSE)#
#
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent", legend = FALSE)#
#
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent", legend = FALSE)
par(mfrow=c(2,2))#
#
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(8)), main="County Densities", border = "transparent", legend = FALSE)#
#
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(8)), main="Tract Densities", border = "transparent", legend = FALSE)#
#
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(8)), main="Block Group Densities", border = "transparent", legend = FALSE)
par(mfrow=c(2,2))
choropleth(virginia.county10,"P0030002", color=list(fun="heat.colors", attr = list(8)), main="Race and Ethnicity: White Alone", border = "transparent", legend = FALSE)#
#
choropleth(virginia.county10,"P0030003",color=list(fun="heat.colors", attr = list(8)), main="Race and Ethnicity: Black Alone", border = "transparent", legend = FALSE)#
#
choropleth(virginia.county10,"P0060002",color=list(fun="heat.colors", attr = list(8)), main="Race and Ethnicity: White AIC", border = "transparent", legend = FALSE)#
#
choropleth(virginia.county10,"P0060003",color=list(fun="heat.colors", attr = list(8)), main="Race and Ethnicity: Black AIC", border = "transparent", legend = FALSE)
#what about at higher disaggregation#
#
eaapp_front <- county(name = c("alleghany","covington","bath","highland"), state = "va", level = "tract")#
#
par(mfrow=c(2,2))#
#
choropleth(eaapp_front,"P0030002", color=list(fun="heat.colors", attr = list(8)), main="White Alone", border = "transparent", legend = FALSE)#
#
choropleth(eaapp_front,"P0030003",color=list(fun="heat.colors", attr = list(8)), main="Black Alone", border = "transparent", legend = FALSE)#
#
choropleth(eaapp_front,"P0060002", color=list(fun="heat.colors", attr = list(8)), main="White AIC", border = "transparent", legend = FALSE)#
#
choropleth(eaapp_front,"P0060003",color=list(fun="heat.colors", attr = list(8)), main="Black AIC", border = "transparent", legend = FALSE)
#what about at higher disaggregation#
#
nomansland <- county(name = c("alleghany","covington","bath","highland"), state = "va", level = "tract")#
#
par(mfrow=c(2,2))#
#
choropleth(nomansland,"P0030002", color=list(fun="heat.colors", attr = list(8)), main="White Alone", border = "transparent", legend = FALSE)#
#
choropleth(nomansland,"P0030003",color=list(fun="heat.colors", attr = list(8)), main="Black Alone", border = "transparent", legend = FALSE)#
#
choropleth(nomansland,"P0060002", color=list(fun="heat.colors", attr = list(8)), main="White AIC", border = "transparent", legend = FALSE)#
#
choropleth(nomansland,"P0060003",color=list(fun="heat.colors", attr = list(8)), main="Black AIC", border = "transparent", legend = FALSE)
#USCensus package has data but functions are sometimes lacking#
#
nml_race_tracts <- as.data.frame(demographics(dem = "P0030002", state = "va", level = "tract"))#
nml_race_tracts$P0030003 <- as.data.frame(demographics(dem = "P0030003", state = "va", level = "tract"))[,1]#
nml_race_tracts$P0060002 <- as.data.frame(demographics(dem = "P0060002", state = "va", level = "tract"))[,1]#
nml_race_tracts$P0060003 <- as.data.frame(demographics(dem = "P0060003", state = "va", level = "tract"))[,1]#
#
nml_race_tracts$match <- substr(rownames(nml_race_tracts),1,5)#
#
nml_race_tracts[which(nml_race_tracts$match == "51005" | nml_race_tracts$match == "51580" | nml_race_tracts$match == "51017" | nml_race_tracts$match == "51091"),]
#USCensus package has data but functions are sometimes lacking#
#
nml_race_tracts <- as.data.frame(demographics(dem = "P0030002", state = "va", level = "tract"))#
nml_race_tracts$P0060002 <- as.data.frame(demographics(dem = "P0060002", state = "va", level = "tract"))[,1]#
nml_race_tracts$P0030003 <- as.data.frame(demographics(dem = "P0030003", state = "va", level = "tract"))[,1]#
nml_race_tracts$P0060003 <- as.data.frame(demographics(dem = "P0060003", state = "va", level = "tract"))[,1]#
#
nml_race_tracts$match <- substr(rownames(nml_race_tracts),1,5)#
#
nml_race_tracts[which(nml_race_tracts$match == "51005" | nml_race_tracts$match == "51580" | nml_race_tracts$match == "51017" | nml_race_tracts$match == "51091"),]
james_inlet <- county(name = c("suffolk", "portsmouth", "chesapeake", "norfolk", "virginia beach"), state = "va", level = "blkgrp")
par(mfrow=c(2,2))#
#
choropleth(james_inlet, "P0030002",color=list(fun="heat.colors", attr = list(8)), main="White Alone", border = "transparent", legend = FALSE)#
#
choropleth(james_inlet, "P0030003",color=list(fun="heat.colors", attr = list(8)), main="Black Alone", border = "transparent", legend = FALSE)#
#
choropleth(james_inlet, "P0060002",color=list(fun="heat.colors", attr = list(8)), main="White AIC", border = "transparent", legend = FALSE)#
#
choropleth(james_inlet, "P0060003",color=list(fun="heat.colors", attr = list(8)), main="Black AIC", border = "transparent", legend = FALSE)
ji_race_blkgrp <- as.data.frame(demographics(dem = "P0010001", state = "va", level = "blkgrp"))#
ji_race_blkgrp$P0030002 <- as.data.frame(demographics(dem = "P0030002", state = "va", level = "blkgrp"))[,1]#
ji_race_blkgrp$P0060002 <- as.data.frame(demographics(dem = "P0060002", state = "va", level = "blkgrp"))[,1]#
ji_race_blkgrp$P0030003 <- as.data.frame(demographics(dem = "P0030003", state = "va", level = "blkgrp"))[,1]#
ji_race_blkgrp$P0060003 <- as.data.frame(demographics(dem = "P0060003", state = "va", level = "blkgrp"))[,1]#
#
ji_race_blkgrp$match <- substr(rownames(ji_race_blkgrp),1,5)#
#
ji_race_blkgrp[which(ji_race_blkgrp$match == "51800" | ji_race_blkgrp$match == "51740" | ji_race_blkgrp$match == "51550" | ji_race_blkgrp$match == "51710" | ji_race_blkgrp$match == "51810"),]
options(scipen=999)#
library(jsonlite)#
library(ggplot2)#
library(forecast)
###################################################
# GSATS & Waccamaw Region Population Projections ##
# Author: Dr. Tyler Frazier, AICP                ##
# Waccamaw Regional Council of Governments       ##
###################################################
options(scipen=999)#
library(jsonlite)#
library(ggplot2)#
library(forecast)#
#library("httr")#
#library("reshape2")#
#library("plyr")#
#library(xlsx)#
################################################################
# Waccamaw Region County Population Estimates (1970 to 2014), ##
# SC-RFAO & NC-OSBM State Projections (2015-2030)             ##
# and WRCOG County Forecasts (2031-2040)                      ##
################################################################
# file fetches of Vintage 2014 Population Estimates from Census API using JSONlite#
host <- 'http://api.census.gov/data'#
key <- '&key=91482a2021884f636bd1b7fae50500a19cbb563d'#
#paths to different vintage years and individual time steps#
vint14_14 <- '/2014/pep/cty?get=CTYNAME,POP&DATE=7'#
vint14_13 <- '/2014/pep/cty?get=CTYNAME,POP&DATE=6'#
vint14_12 <- '/2014/pep/cty?get=CTYNAME,POP&DATE=5'#
vint14_11 <- '/2014/pep/cty?get=CTYNAME,POP&DATE=4'#
vint14_10 <- '/2014/pep/cty?get=CTYNAME,POP&DATE=3'#
api_vint14 <- c(vint14_14, vint14_13, vint14_12, vint14_11, vint14_10)#
# geographic identifier for each county using Census API call syntax#
georgetown <- '&for=county:043&in=state:45' #Georgetown County#
horry <- '&for=county:051&in=state:45' #Horry County#
brunswick <- '&for=county:019&in=state:37' #Brunswick County#
williamsburg <- '&for=county:089&in=state:45' #Williamsburg County#
geo <- c(georgetown, horry, brunswick, williamsburg)#
# create the path to call the data from the Census API for each county and pop est time-step#
path <- apply(expand.grid(host, api_vint14, key, geo), 1, paste, collapse="")#
# call data from Census API Population Estimate Dataset#
x <- lapply(path, fromJSON)
x
library(UScensus2010county)
data(virginia.county10)
library(UScensus2010tract)
data(virginia.tract10)
par(mfrow=c(2,2))#
#
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent", legend = FALSE)#
#
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent", legend = FALSE)#
#
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent", legend = FALSE)
library(UScensus2010)
par(mfrow=c(2,2))#
#
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent", legend = FALSE)#
#
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent", legend = FALSE)#
#
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent", legend = FALSE)
par(mfrow=c(2,2))#
#
choropleth(james_inlet, "P0030002",color=list(fun="heat.colors", attr = list(8)), main="White Alone", border = "transparent", legend = FALSE)#
choropleth(james_inlet, "P0030003",color=list(fun="heat.colors", attr = list(8)), main="Black Alone", border = "transparent", legend = FALSE)#
choropleth(james_inlet, "P0060002",color=list(fun="heat.colors", attr = list(8)), main="White AIC", border = "transparent", legend = FALSE)#
choropleth(james_inlet, "P0060003",color=list(fun="heat.colors", attr = list(8)), main="Black AIC", border = "transparent", legend = FALSE)
# Install Package USCensus2010 with dependencies#
#
library(UScensus2010)#
#
# use the helper functions in UScensus2010 to install county, tract, blkgrp and blk datasets#
#
install.county("osx")#
install.tract("osx")#
install.blkgrp("osx")#
#install.cdp("osx")#
#install.blk("osx")#
#
# move source packages#
#
# install local packages from source#
#
# load package#
library(UScensus2010county)#
library(UScensus2010tract)#
library(UScensus2010blkgrp)#
#library(UScensus2010cdp)#
#library(UScensus2010blk)#
#
# load all counties for one state#
data(virginia.county10)#
data(virginia.tract10)#
data(virginia.blkgrp10)#
#data(virginia.cdp10)#
#data(virginia.blk10)#
#
#map virginia#
choropleth(virginia.county10, border = "transparent")#
choropleth(virginia.tract10, border = "transparent")#
choropleth(virginia.blkgrp10, border = "transparent")#
#choropleth(virginia.cdp10, border = "transparent")#
#choropleth(virginia.blk10, border = "transparent")#
#
#look at the variables#
#
names(virginia.blkgrp10)#
help(virginia.tract10)#
#
#calculate densities using the areaPoly function#
#
par(mfrow=c(2,2))#
#
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent", legend = FALSE)#
#
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent", legend = FALSE)#
#
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent", legend = FALSE)
# load package#
library(UScensus2010county)#
library(UScensus2010tract)#
library(UScensus2010blkgrp)#
#library(UScensus2010cdp)#
#library(UScensus2010blk)#
#
# load all counties for one state#
data(virginia.county10)#
data(virginia.tract10)#
data(virginia.blkgrp10)#
#data(virginia.cdp10)#
#data(virginia.blk10)#
#
#map virginia#
choropleth(virginia.county10, border = "transparent")#
choropleth(virginia.tract10, border = "transparent")#
choropleth(virginia.blkgrp10, border = "transparent")#
#choropleth(virginia.cdp10, border = "transparent")#
#choropleth(virginia.blk10, border = "transparent")#
#
#look at the variables#
#
names(virginia.blkgrp10)#
help(virginia.tract10)#
#
#calculate densities using the areaPoly function#
#
par(mfrow=c(2,2))#
#
den_co <- virginia.county10$P0010001 / areaPoly(virginia.county10)#
virginia.county10$den_co <- den_co#
choropleth(virginia.county10,"den_co",color=list(fun="heat.colors", attr = list(4)), main="County Densities", border = "transparent", legend = FALSE)#
#
den_tr <- virginia.tract10$P0010001 / areaPoly(virginia.tract10)#
virginia.tract10$den_tr <- den_tr#
choropleth(virginia.tract10,"den_tr",color=list(fun="heat.colors", attr = list(4)), main="Tract Densities", border = "transparent", legend = FALSE)#
#
den_bgrp <- virginia.blkgrp10$P0010001 / areaPoly(virginia.blkgrp10)#
virginia.blkgrp10$den_bgrp <- den_bgrp#
choropleth(virginia.blkgrp10,"den_bgrp",color=list(fun="heat.colors", attr = list(4)), main="Block Group Densities", border = "transparent", legend = FALSE)
library(ggmap)
qmap(location = "georgia tech", zoom = 14, source = "osm")
library(ggmap)
qmap(location = "georgia tech")
qmap(location = "georgia tech", zoom = 14)
qmap(location = "georgia tech", zoom = 14, source = "osm")
rm(list=ls(all=TRUE))#
#
setwd("/Users/tylerfrazier/workspace/work_life/WM/Teaching/COLL_100/labs/lab1_whyWM")#
#
data <- read.csv("lab1.csv")#
#
names(data)#
#
data_names <- c("id", "name", "year", "tuition10_11", #
"tuition11_12", "tuition12_13", "tuition13_14", "state", #
"core_exp", "instructional_exp", "research_exp", #
"publicservice_exp")#
names(data) <- data_names#
#
str(data)#
#
table(data$state)#
#
summary(data$tuition13_14)#
#
va_data <- subset(data, state == "Virginia")#
summary(va_data$tuition13_14)#
#
us_mean <- mean(data$tuition13_14, na.rm = TRUE)#
va_above_avg <- subset(va_data, tuition13_14 > us_mean)
subset(va_data, name == "College of William and Mary")
subset(data, name == "College of William and Mary")
min(data$tuition13_14, na.rm=TRUE)
min(data$tuition13_14)
min(data$tuition13_14, na.rm = TRUE)
min(data$tuition13_14, na.rm = TRUE)
min_cost <- min(data$tuition13_14, na.rm = TRUE)
max_cost <- min(data$tuition13_14, na.rm = TRUE)
min_cost
min_cost <- min(data$tuition13_14, na.rm = TRUE)$name
subset(min(data$tuition13_14, na.rm = TRUE))
subset(data, min(tuition13_14, na.rm = TRUE))
subset(data, min(tuition13_14))
subset(data, tuition13_14 == min(data$tuition13_14, na.rm = TRUE))
subset(data, tuition13_14 == min_cost)
subset(data, min(tuition13_14) == TRUE)
?subset
subset(data, tuition13_14 == min(data$tuition13_14))
subset(data, tuition13_14 == min(tuition13_14))
subset(data, tuition13_14 == min_cost))
min_cost <- min(data$tuition13_14, na.rm = TRUE)
subset(data, tuition13_14 == min_cost))
subset(data, tuition13_14 == min_cost)
?which.min
which.min(data$tuition13_14)
subset(data, tuition13_14 == min_cost)
data[which.min(data$tuition13_14),]
subset(data, tuition13_14 == min_cost)
data[which.min(data$tuition13_14),]
data[which.min(data$tuition13_14),]$name
min_name <- subset(data, tuition13_14 == min_cost)
min_name
min_name[2,]
min_name[,2]
as.character(min_name[,2])
min(data$tuition13_14, na.rm = TRUE)#
min(data$tuition13_14, na.rm = TRUE)#
#
min_cost <- min(data$tuition13_14, na.rm = TRUE)#
max_cost <- min(data$tuition13_14, na.rm = TRUE)#
#
min_name <- subset(data, tuition13_14 == min_cost)
min(data$tuition13_14, na.rm = TRUE)
min_cost <- min(data$tuition13_14, na.rm = TRUE)
min_name <- subset(data, tuition13_14 == min_cost)
min_name
min_obs$name
min_obs <- subset(data, tuition13_14 == min_cost)
min_obs$name
min_name <- as.character(min_obs$name)
min_name
min(data$tuition13_14, na.rm = TRUE)#
min_cost <- min(data$tuition13_14, na.rm = TRUE)#
min_obs <- subset(data, tuition13_14 == min_cost)#
min_obs$name#
min_name <- as.character(min_obs$name)#
min_name
max(data$tuition13_14, na.rm = TRUE)#
max_cost <- max(data$tuition13_14, na.rm = TRUE)#
max_obs <- subset(data, tuition13_14 == max_cost)#
max_obs$name#
max_name <- as.character(max_obs$name)#
max_name
min(data$tuition13_14, na.rm = TRUE)
min_cost <- min(data$tuition13_14, na.rm = TRUE)
min_obs <- subset(data, tuition13_14 == min_cost)
min_obs$name
class(min_obs$name)
min_name <- as.character(min_obs$name)
min_name
class(min_name)
?subset
?class
?[]
?Subscripting
?extract
?>
?min
?base
?Subscript
?Extract
wm_tuition1314 <- data[which(data$name == "College of William and Mary"), ]$tuition13_14#
wm_tuition1213 <- data[which(data$name == "College of William and Mary"), ]$tuition12_13#
wm_tuition1112 <- data[which(data$name == "College of William and Mary"), ]$tuition11_12#
wm_tuition1011 <- data[which(data$name == "College of William and Mary"), ]$tuition10_11#
#
change14 <- wm_tuition1314 / wm_tuition1213#
change13 <- wm_tuition1213 / wm_tuition1112#
change12 <- wm_tuition1112 / wm_tuition1011#
#
mean(c(change14, change13, change12))
change14
change13
change12
wm_change <- mean(c(change14, change13, change12))
wm_change
wm_tuition1314 <- data[which(data$name == "College of William and Mary"), ]$tuition13_14#
wm_tuition1213 <- data[which(data$name == "College of William and Mary"), ]$tuition12_13#
wm_tuition1112 <- data[which(data$name == "College of William and Mary"), ]$tuition11_12#
wm_tuition1011 <- data[which(data$name == "College of William and Mary"), ]$tuition10_11#
#
wm_change14 <- wm_tuition1314 / wm_tuition1213#
wm_change13 <- wm_tuition1213 / wm_tuition1112#
wm_change12 <- wm_tuition1112 / wm_tuition1011#
#
wm_change <- mean(c(wm_change14, wm_change13, wm_change12))#
#
wm_change
us_tuition1314 <- data$tuition13_14#
us_tuition1213 <- data$tuition12_13#
us_tuition1112 <- data$tuition11_12#
us_tuition1011 <- data$tuition10_11#
#
us_change14 <- us_tuition1314 / us_tuition1213#
us_change13 <- us_tuition1213 / us_tuition1112#
us_change12 <- us_tuition1112 / us_tuition1011#
#
us_change <- mean(c(us_change14, us_change13, us_change12))#
#
us_change
us_change14 <- data$tuition13_14 / data$tuition12_13#
us_change13 <- data$tuition12_13 / data$tuition11_12#
us_change12 <- data$tuition11_12 / data$tuition10_11
us_change <- mean(c(us_change14, us_change13, us_change12))
us_change
?mean
us_change <- mean(c(us_change14, us_change13, us_change12), na.rm = TRUE)
us_change
us_change14
data$us_change14 <- data$tuition13_14 / data$tuition12_13
data$us_change13 <- data$tuition12_13 / data$tuition11_12
data$us_change12 <- data$tuition11_12 / data$tuition10_11
data$us_change14
us_change <- mean(data$us_change14, data$us_change13, data$us_change12)
us_change
data$us_change <- mean(data$us_change14, data$us_change13, data$us_change12)
data$us_change
str(data)
data$us_change <- (data$us_change14 + data$us_change13 + data$us_change12) / 3
data$us_change
data$us_change <- mean(c(data$us_change14, data$us_change13, data$us_change12))
data$us_change
data$us_change <- (data$us_change14 + data$us_change13 + data$us_change12) / 3
data$us_change
mean(data$us_change)
mean(data$us_change, na.rm = TRUE)
summary(data$us_change)
ls()
wm <- subset(data, name == "College of William and Mary")
str(wm)
wm$instructional_exp
summary(data$instructional_exp)
plot(data$instructional_exp, data$tuition13_14)
plot(data$instructional_exp)
plot(data$tuition13_14, data$instructional_exp)
plot(data$tuition13_14, data$instructional_exp)
plot(va_data$instructional_exp, va_data$tuition13_14)
wm_plot <- data[which(data$name=="College of William and Mary"),]
points(wm_plot$instructional_exp, wm_plot$tuition13_14, col="green")
